# LifeSync Project: Revised File Repository Structure (Multi-Page Application)

This document outlines the revised file repository structure for the LifeSync platform, transitioning from a Single-Page Application (SPA) to a Multi-Page Application (MPA) for easier direct navigation and content management.

## Root Directory: `/LifeSync_Project_Root_MPA/`

/LifeSync_Project_Root_MPA/├── index.html                       # Home/About page (Landing Page)├── assessments.html                 # Assessments page├── tools.html                       # Tools page├── resources.html                   # Resources page├── profile.html                     # User Profile page (View & Edit Core Profile)├── ugq.html                         # User-Generated Questions page (Create & View Own UGQs)├── sync.html                        # Couple Sync page (Connect, Manage Sync - Placeholder for now)│├── /css/                            # Stylesheets│   └── shared.css                   # Common styles for all pages (theming, layout, components)│   └── (page-specific.css)        # Optional: if a page has very unique/complex styles│├── /js/                             # JavaScript files│   └── shared.js                    # Common JavaScript (Firebase init, auth, i18n, modals, nav highlighting)│   └── assessments.js               # JavaScript specific to assessments.html│   └── resources.js                 # JavaScript specific to resources.html (wizard, category display)│   └── profile.js                   # JavaScript specific to profile.html (form handling, completion bar)│   └── ugq.js                       # JavaScript specific to ugq.html│   └── (sync.js)                    # JavaScript specific to sync.html (placeholder for now)│├── /assets/                         # Static assets│   ├── /images/                     # Image assets│   │   └── lifesync_logo.png        # (If used, or keep existing setup)│   │   └── (other_ui_graphics...)   # Placeholder for any other UI graphics│   ├── /videos/                     # Video assets│   │   └── Abstract_Plexus.mp4      # Example background video (if self-hosted)│   └── (other_assets).js            # (Optional) If resource data or large JS objects are moved out│├── /firebase_config/                # (Usually not in client repo; config embedded or env variables)│   └── (service_account_key.json) # Example: For Admin SDK (NOT for client-side)│├── /firestore_rules/                # Firestore security rules│   └── firestore.rules              # Defines access control for your Firestore database│├── /storage_rules/                  # Firebase Storage security rules (if Storage is used)│   └── storage.rules                # Defines access control for Firebase Storage│├── /functions/                      # (Optional) If using Firebase Cloud Functions for backend logic│   ├── index.js                     # Main file for Cloud Functions│   ├── package.json                 # Node.js dependencies for Cloud Functions│   └── .eslintrc.js                 # Linting rules for Cloud Functions│├── /documentation/                  # All project documentation files│   ├── LifeSync_Pitch_Document_vX.txt│   ├── LifeSync_Scoring_Typology_Framework_vX.txt│   ├── LifeSync_Development_Plan_Roadmap_vX.txt│   ├── LifeSync_File_Repository_Structure_vX+1.txt # This updated document│   ├── LifeSync_Comprehensive_Assessment_Questions_vX.txt│   ├── LifeSync_Technical_Specification_vX.txt│   ├── LifeSync_Recreation_Prompt_vX.txt│   └── LifeSync_Maintenance_Prompt_vX.txt│├── firebase.json                    # Firebase project deployment configuration├── .firebaserc                      # Associates local directory with a Firebase project└── .gitignore                       # Specifies intentionally untracked files
## Key Changes from SPA Structure:

1.  **Multiple HTML Files:** The main `index.html` is now primarily the landing/about page. Other key sections (`assessments`, `tools`, `resources`, `profile`, `ugq`, `sync`) are broken out into their own `.html` files.
2.  **Shared CSS/JS:**
    * `css/shared.css`: Will consolidate all common styling rules (variables, body, navigation, footer, modals, buttons, utility classes) previously in the `<style>` block of the single `index.html`.
    * `js/shared.js`: Will contain JavaScript functions and initializations common to all pages (Firebase setup, authentication state handling, i18next, modal controls, notification system, navigation link highlighting).
3.  **Page-Specific JavaScript:**
    * JavaScript logic that is unique to a particular page (e.g., the complex quiz logic for `assessments.html`, the resource filtering and display for `resources.html`) will be in dedicated `.js` files linked by their respective HTML pages (or embedded in `<script type="module">` tags within each HTML for this multi-file generation). This promotes modularity.
4.  **Navigation:**
    * Navigation links in `nav` will now be standard `<a>` tags pointing to the respective `.html` files (e.g., `<a href="assessments.html">...</a>`).
    * The JavaScript in `shared.js` will include a function to dynamically add an `active-nav` class to the correct navigation link based on the current page's URL.

This structure separates concerns more clearly, making the project easier to manage and allowing for direct URL access to different parts of the application.

