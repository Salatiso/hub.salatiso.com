function normalizeContact(e){const t=e.id||(null==(n=null==(a=globalThis.crypto)?void 0:a.randomUUID)?void 0:n.call(a))||`${Date.now()}-${Math.random().toString(36).slice(2)}`;var a,n;const s=e.name||{};return{id:t,name:{formatted:s.formatted||e.formattedName||[s.given,s.middle,s.family].filter(Boolean).join(" ")||e.fullName||"",given:s.given||"",family:s.family||"",middle:s.middle||""},phones:Array.isArray(e.phones)?e.phones.filter(Boolean).map(e=>({type:e.type||"",value:String(e.value||e).trim()})).filter(e=>e.value):[],emails:Array.isArray(e.emails)?e.emails.filter(Boolean).map(e=>({type:e.type||"",value:String(e.value||e).trim()})).filter(e=>e.value):[],addresses:Array.isArray(e.addresses)?e.addresses.filter(Boolean).map(e=>({type:e.type||"",street:e.street||e.streetAddress||"",city:e.city||e.locality||"",region:e.region||e.state||"",postalCode:e.postalCode||e.zip||"",country:e.country||""})):[],notes:e.notes||"",tags:Array.isArray(e.tags)?e.tags.filter(Boolean):[]}}function parseCSV(e){const t=e.replace(/\r\n/g,"\n").replace(/\r/g,"\n").split("\n").filter(e=>e.trim().length>0);if(0===t.length)return[];const a=splitCsvLine(t[0]);return t.slice(1).map(e=>splitCsvLine(e)).map(e=>{const t={};a.forEach((a,n)=>{var s,r;return t[a.trim().toLowerCase()]=(null==(r=null==(s=e[n])?void 0:s.trim)?void 0:r.call(s))??""});const n=t["first name"]||t.firstname||t.given||t.givenname||"",s=t["last name"]||t.lastname||t.family||t.surname||"",r=t["middle name"]||t.middlename||"",o=t.name||`${n} ${s}`.trim(),i=t.phone||t["phone number"]||t.mobile||t.tel||"",l=t.email||t["e-mail"]||"",m=t.street||t["street address"]||"",p=t.city||"",d=t.state||t.province||t.region||"",c=t.zip||t["postal code"]||t.postcode||"",u=t.country||"";return normalizeContact({name:{formatted:o,given:n,family:s,middle:r},phones:i?[{value:i,type:"mobile"}]:[],emails:l?[{value:l,type:"home"}]:[],addresses:m||p||d||c||u?[{street:m,city:p,region:d,postalCode:c,country:u,type:"home"}]:[]})})}function splitCsvLine(e){const t=[];let a="",n=!1;for(let s=0;s<e.length;s++){const r=e[s];'"'===r?n&&'"'===e[s+1]?(a+='"',s++):n=!n:","!==r||n?a+=r:(t.push(a),a="")}return t.push(a),t}function parseVCF(e){const t=e.split(/END:VCARD/i).map(e=>e.trim()).filter(Boolean),a=[];for(const n of t){const e=n.split(/\r?\n/),t={phones:[],emails:[],addresses:[]};for(let a of e){if(a=a.trim(),!a||/^BEGIN:VCARD/i.test(a))continue;const[e,n]=a.split(":");if(!e)continue;const s=(n||"").trim(),[r,...o]=e.split(";"),i=r.toUpperCase(),l=o.find(e=>e.toUpperCase().startsWith("TYPE=")),m=l?l.split("=")[1]:"";switch(i){case"FN":t.name=t.name||{},t.name.formatted=s;break;case"N":{const[e,a,n]=s.split(";");t.name=t.name||{},Object.assign(t.name,{family:e,given:a,middle:n});break}case"TEL":s&&t.phones.push({type:m,value:s});break;case"EMAIL":s&&t.emails.push({type:m,value:s});break;case"ADR":{const e=s.split(";"),a={street:e[2]||"",city:e[3]||"",region:e[4]||"",postalCode:e[5]||"",country:e[6]||"",type:m};t.addresses.push(a);break}}}a.push(normalizeContact(t))}return a}function parsePastedJSON(e){try{const t=JSON.parse(e);return Array.isArray(t)?t.map(normalizeContact):t&&"object"==typeof t&&t.contacts&&Array.isArray(t.contacts)?t.contacts.map(normalizeContact):[normalizeContact(t)]}catch(t){return[]}}function suggestRelationships(e,t={}){var a;const n=(t.lastName||t.surname||(null==(a=t.name)?void 0:a.family)||"").toLowerCase();return e.map(e=>{var t,a;const s=((null==(t=e.name)?void 0:t.formatted)||"").toLowerCase(),r=((null==(a=e.name)?void 0:a.family)||"").toLowerCase();let o="";return o=/\b(mom|mother|mama|umama)\b/.test(s)?"mother":/\b(dad|father|tata|ubaba)\b/.test(s)?"father":/\b(wife|spouse|umfazi)\b/.test(s)||/\b(husband|indoda)\b/.test(s)?"spouse":/\b(son|boy|unyana)\b/.test(s)?"son":/\b(daughter|girl|intombi)\b/.test(s)?"daughter":/\b(sister|usisi)\b/.test(s)?"sister":/\b(brother|ubhuti)\b/.test(s)?"brother":r&&n&&r===n?"family":"friend",{contactId:e.id,suggestion:o}})}function toFamilyTreeNodes(e,t){return{nodes:e.map(e=>{var t;return{id:e.id,label:(null==(t=e.name)?void 0:t.formatted)||"Unnamed",deceased:!!e.deceased,data:e}}),edges:t.map(e=>({id:`${e.fromId}-${e.type}-${e.toId}`,from:e.fromId,to:e.toId,type:e.type}))}}function exampleAIPrompt(){return'Convert my contacts to the following JSON array schema. Only output valid JSON without comments.\n\nSchema per contact:\n{\n  name: { formatted: string, given?: string, family?: string, middle?: string },\n  phones?: [{ type?: string, value: string }],\n  emails?: [{ type?: string, value: string }],\n  addresses?: [{ type?: string, street?: string, city?: string, region?: string, postalCode?: string, country?: string }],\n  notes?: string,\n  tags?: string[]\n}\n\nExample minimal contact:\n[\n  {\n    "name": { "formatted": "Jane Doe", "given": "Jane", "family": "Doe" },\n    "phones": [{ "type": "mobile", "value": "+27 82 123 4567" }],\n    "emails": [{ "type": "home", "value": "jane@example.com" }]\n  }\n]'}export{parseVCF as a,parsePastedJSON as b,exampleAIPrompt as e,normalizeContact as n,parseCSV as p,suggestRelationships as s,toFamilyTreeNodes as t};
