import{C as e,g as i}from"./index-0094ed61.js";class GoogleDriveService{constructor(){this.isInitialized=!1,this.isSignedIn=!1,this.accessToken=null,this.userProfile=null;this.config={apiKey:"AIzaSyBl15V2pM4E6Yeh7YzVEdBjXsH3E2b1Wro",clientId:"1039752653127-abcdefghijklmnop1234567890.apps.googleusercontent.com",scope:"https://www.googleapis.com/auth/drive.file",discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]}}static getInstance(){return GoogleDriveService.instance||(GoogleDriveService.instance=new GoogleDriveService),GoogleDriveService.instance}async initialize(){if(!this.isInitialized&&this.config.clientId&&this.config.apiKey)return new Promise((e,i)=>{if(window.google)this.initClient(e,i);else{const t=document.createElement("script");t.src="https://accounts.google.com/gsi/client",t.onload=()=>this.initClient(e,i),t.onerror=()=>{i(new Error("Failed to load Google Identity Services script"))},document.head.appendChild(t)}})}async initClient(e,i){try{const t=window.google.accounts.oauth2.initTokenClient({client_id:this.config.clientId,scope:this.config.scope,callback:t=>{t.error?i(new Error(t.error)):(this.accessToken=t.access_token,this.isSignedIn=!0,this.isInitialized=!0,this.fetchUserProfile(),e())}});this.tokenClient=t,this.isInitialized=!0,e()}catch(t){i(t)}}async fetchUserProfile(){if(this.accessToken)try{const e=await fetch("https://www.googleapis.com/oauth2/v2/userinfo",{headers:{Authorization:`Bearer ${this.accessToken}`}});e.ok&&(this.userProfile=await e.json())}catch(e){}}async signIn(){this.isInitialized||await this.initialize();const e=this.tokenClient;if(!e)throw new Error("Google Identity Services not initialized");return new Promise((i,t)=>{e.callback=e=>{e.error?t(new Error(e.error)):(this.accessToken=e.access_token,this.isSignedIn=!0,this.fetchUserProfile(),i())},e.requestAccessToken()})}async signOut(){if(this.isSignedIn){if(this.accessToken)try{await fetch(`https://oauth2.googleapis.com/revoke?token=${this.accessToken}`,{method:"POST",headers:{"Content-type":"application/x-www-form-urlencoded"}})}catch(e){}this.accessToken=null,this.isSignedIn=!1,this.userProfile=null}}isUserSignedIn(){return this.isSignedIn&&!!this.accessToken}getUserProfile(){return this.userProfile}async uploadFile(e,i,t="application/json"){if(!this.isSignedIn||!this.accessToken)throw new Error("Not signed in to Google Drive");const o=new Blob([i],{type:t}),s={name:e,mimeType:t,parents:["appDataFolder"]},r=new FormData;r.append("metadata",new Blob([JSON.stringify(s)],{type:"application/json"})),r.append("file",o);const n=await fetch("https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",{method:"POST",headers:{Authorization:`Bearer ${this.accessToken}`},body:r});if(!n.ok)throw new Error(`Upload failed: ${n.statusText}`);return(await n.json()).id}async downloadFile(e){if(!this.isSignedIn||!this.accessToken)throw new Error("Not signed in to Google Drive");const i=await fetch(`https://www.googleapis.com/drive/v3/files/${e}?alt=media`,{headers:{Authorization:`Bearer ${this.accessToken}`}});if(!i.ok)throw new Error(`Download failed: ${i.statusText}`);return await i.text()}async listProfileFiles(){if(!this.isSignedIn||!this.accessToken)throw new Error("Not signed in to Google Drive");const e=await fetch("https://www.googleapis.com/drive/v3/files?q=name+contains+'.lifesync'+and+trashed+=+false&spaces=drive&fields=files(id,+name,+modifiedTime,+size)&orderBy=modifiedTime+desc",{headers:{Authorization:`Bearer ${this.accessToken}`}});if(!e.ok)throw new Error(`List files failed: ${e.statusText}`);return(await e.json()).files||[]}async deleteFile(e){if(!this.isSignedIn||!this.accessToken)throw new Error("Not signed in to Google Drive");const i=await fetch(`https://www.googleapis.com/drive/v3/files/${e}`,{method:"DELETE",headers:{Authorization:`Bearer ${this.accessToken}`}});if(!i.ok)throw new Error(`Delete failed: ${i.statusText}`)}async updateFile(e,i){if(!this.isSignedIn||!this.accessToken)throw new Error("Not signed in to Google Drive");const t=new Blob([i],{type:"application/json"}),o=await fetch(`https://www.googleapis.com/upload/drive/v3/files/${e}?uploadType=media`,{method:"PATCH",headers:{Authorization:`Bearer ${this.accessToken}`},body:t});if(!o.ok)throw new Error(`Update failed: ${o.statusText}`)}async fileExists(e){if(!this.isSignedIn||!this.accessToken)return null;try{const i=await fetch(`https://www.googleapis.com/drive/v3/files?q=name='${e}'+and+trashed+=+false&spaces=drive&fields=files(id,+name)`,{headers:{Authorization:`Bearer ${this.accessToken}`}});if(!i.ok)return null;const t=(await i.json()).files||[];return t.length>0?t[0].id:null}catch(i){return null}}}const t=GoogleDriveService.getInstance(),deriveKey=(i,t)=>{const o=t||"lifesync_salt_2024";return e.PBKDF2(i,o,{keySize:8,iterations:1e4}).toString()},exportPortableProfile=async(t,o)=>{try{const n=(await i.listLocalProfiles()).find(e=>e.id===t);if(!n)throw new Error("Profile not found");const a=await i.getLocalProfileData(t),c={version:"1.0",exportDate:Date.now(),profile:n,profileData:a,checksum:""},l=JSON.stringify({profile:n,profileData:a}),d=btoa(l).slice(0,32);c.checksum=d;const h=deriveKey(o);return s=JSON.stringify(c),r=h,e.AES.encrypt(s,r).toString()}catch(n){throw new Error("Export failed")}var s,r},importPortableProfile=async(t,o)=>{try{const s=((i,t)=>e.AES.decrypt(i,t).toString(e.enc.Utf8))(t,deriveKey(o)),r=JSON.parse(s);if(!r.version||!r.profile||!r.profileData)throw new Error("Invalid profile format");const n=JSON.stringify({profile:r.profile,profileData:r.profileData}),a=btoa(n).slice(0,32);if(r.checksum!==a)throw new Error("Profile checksum mismatch - file may be corrupted");const c=await i.listLocalProfiles();if(c.find(e=>e.displayName===r.profile.displayName))throw new Error("Profile already exists. Please choose a different name or delete the existing profile.");const l=await i.createLocalProfile(r.profile.displayName,r.profile.email,{pin:r.profile.securityPin,usePassword:r.profile.usePassword,firstName:r.profile.firstName,lastName:r.profile.lastName});await i.updateLocalProfileData(l.id,r.profileData)}catch(s){throw s}},downloadPortableProfile=(e,i)=>{const t=new Blob([e],{type:"application/json"}),o=URL.createObjectURL(t),s=document.createElement("a");s.href=o,s.download=i,document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(o)};export{downloadPortableProfile as d,exportPortableProfile as e,t as g,importPortableProfile as i};
