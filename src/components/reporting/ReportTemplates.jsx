/**
 * Report Templates
 * Template definitions and utilities for report generation
 */

export const reportTemplates = {
  summary: {
    name: 'Family Summary',
    description: 'Overview of all family members and statistics',
    fields: ['totalMembers', 'emergencyContacts', 'totalEvents', 'eventsByType'],
    format: 'dashboard',
  },
  members: {
    name: 'Member Details',
    description: 'Detailed information about family members',
    fields: ['name', 'relationship', 'dateOfBirth', 'phone', 'email', 'address', 'isEmergencyContact'],
    format: 'table',
  },
  events: {
    name: 'Event Timeline',
    description: 'Complete family event history',
    fields: ['title', 'date', 'type', 'description', 'participants'],
    format: 'timeline',
  },
  birthdays: {
    name: 'Birthday Calendar',
    description: 'All family member birthdays',
    fields: ['name', 'dateOfBirth', 'relationship'],
    format: 'calendar',
  },
  anniversaries: {
    name: 'Anniversaries',
    description: 'All anniversary events',
    fields: ['title', 'date', 'participants', 'description'],
    format: 'list',
  },
  emergency: {
    name: 'Emergency Contacts',
    description: 'Emergency contact information',
    fields: ['name', 'relationship', 'phone', 'email', 'address'],
    format: 'table',
  },
};

/**
 * Format data for export
 */
export function formatDataForExport(data, format) {
  switch (format) {
    case 'csv':
      return convertToCSV(data);
    case 'json':
      return JSON.stringify(data, null, 2);
    case 'pdf':
      return formatForPDF(data);
    default:
      return JSON.stringify(data);
  }
}

/**
 * Convert data to CSV format
 */
function convertToCSV(data) {
  if (!Array.isArray(data) || data.length === 0) {
    return '';
  }

  // Get headers from first object
  const headers = Object.keys(data[0]);
  const csv = [headers.join(',')];

  // Add rows
  data.forEach(obj => {
    const values = headers.map(header => {
      const value = obj[header];
      // Escape quotes and wrap in quotes if contains comma
      if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
        return `"${value.replace(/"/g, '""')}"`;
      }
      return value || '';
    });
    csv.push(values.join(','));
  });

  return csv.join('\n');
}

/**
 * Format data for PDF
 */
function formatForPDF(data) {
  // Placeholder for PDF formatting
  // In production, would use a library like jsPDF or html2pdf
  return `
PDF Report Generated: ${new Date().toLocaleString()}

${JSON.stringify(data, null, 2)}

Report generated by LifeSync Family Manager
  `;
}

/**
 * Export data to file
 */
export function downloadFile(content, filename, mimeType) {
  const blob = new Blob([content], { type: mimeType });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
}

/**
 * Generate filename with timestamp
 */
export function generateFilename(template, format) {
  const timestamp = new Date().toISOString().split('T')[0];
  const formatExt = format === 'json' ? 'json' : format === 'pdf' ? 'pdf' : 'csv';
  return `family-report-${template}-${timestamp}.${formatExt}`;
}

/**
 * Report filtering utilities
 */
export const filterUtils = {
  filterByDateRange(items, startDate, endDate, dateField = 'date') {
    if (!startDate || !endDate) return items;
    
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    return items.filter(item => {
      const itemDate = new Date(item[dateField]);
      return itemDate >= start && itemDate <= end;
    });
  },

  filterByType(items, type, typeField = 'type') {
    if (!type) return items;
    return items.filter(item => item[typeField] === type);
  },

  sortByDate(items, dateField = 'date', ascending = false) {
    return [...items].sort((a, b) => {
      const aDate = new Date(a[dateField]);
      const bDate = new Date(b[dateField]);
      return ascending ? aDate - bDate : bDate - aDate;
    });
  },
};

/**
 * Report validation
 */
export function validateReportConfig(config) {
  const errors = [];

  if (!config.template) {
    errors.push('Report template is required');
  }

  if (!config.format || !['csv', 'json', 'pdf'].includes(config.format)) {
    errors.push('Valid export format is required');
  }

  if (config.dateRange === 'custom') {
    if (!config.startDate || !config.endDate) {
      errors.push('Start and end dates are required for custom range');
    }
    if (config.startDate > config.endDate) {
      errors.push('Start date must be before end date');
    }
  }

  return errors;
}
